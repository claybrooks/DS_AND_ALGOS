#pragma once

#include <exception>
#include <sstream>

namespace Datastructures
{
namespace Trees
{
namespace Exceptions
{
    /***************************************************************************************************************
    *
    *
    ***************************************************************************************************************/
    class NullNodeException : public std::exception
    {
    public:
        /***********************************************************************************************************
        *
        *
        ***********************************************************************************************************/
        virtual const char* what() const throw()
        {
            std::stringstream ss;
            ss << "Nullptr passed for node";
            return ss.str().c_str();
        }
    };

    /***************************************************************************************************************
    *
    *
    ***************************************************************************************************************/
    template<typename T>
    class DuplicateKeyException : public std::exception
    {
    public:
        /***********************************************************************************************************
        *
        *
        ***********************************************************************************************************/
        DuplicateKeyException(const T& duplicate_key) : m_key(duplicate_key) {}

        /***********************************************************************************************************
        *
        *
        ***********************************************************************************************************/
        virtual const char* what() const throw()
        {
            std::stringstream ss;
            ss << "Duplicate key given: " << m_key;
            return ss.str().c_str();
        }

    private:
        T m_key;
    };

    /***************************************************************************************************************
    *
    *
    ***************************************************************************************************************/
    template<typename T>
    class KeyOutOfRangeException : public std::exception
    {
    public:
        /***********************************************************************************************************
        *
        *
        ***********************************************************************************************************/
        KeyOutOfRangeException(const T& key, const T& low, const T& high) :
            m_key(key),
            m_low(low),
            m_high(high)
        {
        }

        /***********************************************************************************************************
        *
        *
        ***********************************************************************************************************/
        virtual const char* what() const throw()
        {
            std::stringstream ss;
            ss << "Key {" << m_key << "} outside of range [" << m_low << "," << m_high << ")";
            return ss.str().c_str();
        }

    private:
        T m_key;
        T m_low;
        T m_high;
    };
}
}
}